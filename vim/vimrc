" Vundle!
set nocompatible               " be iMproved
filetype off                   " required!

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#rc()
" 
" let Vundle manage Vundle
" required!
Bundle 'VundleVim/Vundle.vim'

" My bundles
" LESS support
Bundle 'groenewege/vim-less'
" HAML support
Bundle 'tpope/vim-haml'
" Javscript support
Bundle 'pangloss/vim-javascript'
" JSX support
Bundle 'mxw/vim-jsx'
" Ruby helpers
Bundle 'vim-ruby/vim-ruby'
" Rails helpers
Bundle 'tpope/vim-rails'
" Cucumber support
Bundle 'tpope/vim-cucumber', {'rtp': 'vim/'}
" Auto add end keyword in ruby
Bundle 'tpope/vim-endwise'
" Nerdtree for project navigation
Bundle 'scrooloose/nerdtree'
" Syntax checks
Bundle 'w0rp/ale'
" Easily browse tags in current file
Bundle 'majutsushi/tagbar'
" Git helpers
Bundle 'tpope/vim-fugitive'
" Fuzzy file search
Bundle 'wincent/command-t'
" " Autocomplete
Bundle 'Valloric/YouCompleteMe'
" Add a gutter that shows git additions/deletions/etc
Bundle 'airblade/vim-gitgutter'
" Pretty status line
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
" Documentation lookups
Plugin 'rizzatti/dash.vim'
" Easily change surrounding tags (e.g. in html)
Plugin 'tpope/vim-surround'

" CONFIGURATION
let mapleader = " "
" Use sh instead of zsh, because vim fucks up the zsh config in a way that
" doesn't load the rvm setup properly. Somehow it makes it so it's impossible
" to install the gems I need to run lessc, which is used by syntastic to run
" syntax checks on less files.
set shell=/bin/sh

" Pretty colours
syntax enable
" made_of_code
set background=dark
colorscheme molokai

" The default comment color is impossible to read
hi Comment         guifg=#A8A491

" Pretty fonts
set guifont=Inconsolata-dz\ for\ Powerline:h10

" Use patched fonts for status bar
let g:airline_powerline_fonts = 1

" Make airline look like powerline
let g:airline_theme = 'powerlineish'

" Only show git symbols when they're non-zero
let airline#extensions#hunks#non_zero_only = 1

" Always show the status line
set laststatus=2

" Let CommandT use the full window height when searching files
let g:CommandTMaxHeight=0
" Use git ls-files for fast searching of git projects
" let g:CommandTFileScanner='git' " This is only necessary when working with v. large projects

" Indentation
filetype plugin indent on
set tabstop=2
set shiftwidth=2
set expandtab
set smarttab

" Max line length
set textwidth=120
" Wrap at word boundaries
set formatoptions+=t

" Force the indentation to be correct when shifting
set shiftround

" Backspace through lines too
set backspace=indent,eol,start

" Improved file path completion when typing vim commands
set wildmenu
set wildmode=longest,list,full
" Ignore files I don't want to open in vim
set wildignore+=*.o,*~,*.pyc,*.jpg,*.gif,*.png,tmp,coverage,fixtures,node_modules,*/cache

" Autostrip trailing whitespace for certain filetypes
" See http://vim.wikia.com/wiki/Remove_unwanted_spaces
augroup TrailingSpaces
  autocmd!
  autocmd BufWritePre *.rb,*.js,*.feature :%s/\s\+$//e
augroup END

" Make searching be incremental (e.g. search as you type)
set incsearch

" Show the matching brace when a new one is added
set showmatch

" More natural split opening position
set splitright

" MAPPINGS

" Use ctrl-[hjkl] to select the active split!
nmap <silent> <c-k> :wincmd k<CR>
nmap <silent> <c-j> :wincmd j<CR>
nmap <silent> <c-h> :wincmd h<CR>
nmap <silent> <c-l> :wincmd l<CR>

" Move the splits arround!
" Doesn't work :(
"nmap <silent> <c-s-k> <C-W>K
"nmap <silent> <c-s-j> <C-W>J
"nmap <silent> <c-s-h> <C-W>H
"nmap <silent> <c-s-l> <C-W>L

" Open Nerd Tree
nmap <leader>n :NERDTree<cr>

" Open tagbar
nmap <leader>s :TagbarToggle<CR>

" Close current buffer
nmap <leader>q :bd<CR>

" Look up command in dash
nmap <silent> <leader>d :Dash<CR>

" Save file
nmap <leader>w :w<CR>
nmap <leader><Space> :w<CR>

" (From https://wincent.com/wiki/rails.vim_cheatsheet)
" in a model the "alternate" is the spec and the "related" is the schema
" in a controller (method) the "alternate" is the spec and the "related" is the view
" in a view the "alternate" is the spec and the "related" is the controller (method)
" Easily switch between file and its spec using rails.vim's alternate file functionality
nmap <leader>a :A<CR>
" Easily switch between controllers and views using rails.vim's related file functionality
nmap <leader>r :R<CR>

" Auto-reload the CommandT file list
augroup AutoReloadCommandT
  autocmd!
  autocmd FocusGained * CommandTFlush
  autocmd BufWritePost * CommandTFlush
augroup END

" When pasting, don't replace the paste buffer with what was overwritten
function! RestoreRegister()
  let @" = s:restore_reg
  return ''
endfunction
function! s:Repl()
  let s:restore_reg = @"
  return "p@=RestoreRegister()\<cr>"
endfunction
vmap <silent> <expr> p <sid>Repl()

" Special exceptions for large project
augroup LargeProjects
  autocmd!
  " Whitespace-only changes complicate PRs
  autocmd BufNewFile,BufRead ~/dev/coupa_development/**/* autocmd! TrailingSpaces
augroup END

" Run both ESLint and StyleLint in jsx files
augroup FiletypeGroup
  autocmd!
  au BufNewFile,BufRead *.jsx set filetype=javascript.jsx
augroup END
let g:ale_linter_aliases = {'jsx': ['css', 'javascript']}
let g:ale_linters = {'jsx': ['stylelint', 'eslint']}
